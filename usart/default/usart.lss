
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000076  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028a  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000169  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fc  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fc  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c7  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  b6:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init>:
	}
}

void init(void){
	
	DDRB = DDRD = 0xF0; // Ledek kimenetbe állítása
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	81 bb       	out	0x11, r24	; 17
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;		// 7 szegmens kiement
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xF8;		// RED kimenet sorok kimenet, oszlopok bemenet
  ca:	88 ef       	ldi	r24, 0xF8	; 248
  cc:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xE0;		// Gombok bemenet
  ce:	80 ee       	ldi	r24, 0xE0	; 224
  d0:	80 93 64 00 	sts	0x0064, r24
}
  d4:	08 95       	ret

000000d6 <matrixValue>:

unsigned char matrixValue(void){
  d6:	28 e0       	ldi	r18, 0x08	; 8
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	60 e4       	ldi	r22, 0x40	; 64
  e0:	7c e9       	ldi	r23, 0x9C	; 156
  e2:	4f c0       	rjmp	.+158    	; 0x182 <matrixValue+0xac>
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){

		PORTC = (row&0b01111000);
  e4:	82 2f       	mov	r24, r18
  e6:	88 77       	andi	r24, 0x78	; 120
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	cb 01       	movw	r24, r22
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <matrixValue+0x16>

		_delay_ms(10);

		switch((~PINC) & 0b111){
  f0:	83 b3       	in	r24, 0x13	; 19
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	80 95       	com	r24
  f6:	90 95       	com	r25
  f8:	87 70       	andi	r24, 0x07	; 7
  fa:	90 70       	andi	r25, 0x00	; 0
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	91 05       	cpc	r25, r1
 100:	b1 f0       	breq	.+44     	; 0x12e <matrixValue+0x58>
 102:	84 30       	cpi	r24, 0x04	; 4
 104:	91 05       	cpc	r25, r1
 106:	29 f1       	breq	.+74     	; 0x152 <matrixValue+0x7c>
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	a9 f5       	brne	.+106    	; 0x176 <matrixValue+0xa0>
			case 1:
				if(!state){
 10c:	33 23       	and	r19, r19
 10e:	99 f5       	brne	.+102    	; 0x176 <matrixValue+0xa0>
					if(row == 8) value = '1';
 110:	28 30       	cpi	r18, 0x08	; 8
 112:	11 f4       	brne	.+4      	; 0x118 <matrixValue+0x42>
 114:	81 e3       	ldi	r24, 0x31	; 49
 116:	08 95       	ret
					else if(row == 16) value = '4';
 118:	20 31       	cpi	r18, 0x10	; 16
 11a:	11 f4       	brne	.+4      	; 0x120 <matrixValue+0x4a>
 11c:	84 e3       	ldi	r24, 0x34	; 52
 11e:	08 95       	ret
					else if(row == 32) value = '7';
 120:	20 32       	cpi	r18, 0x20	; 32
 122:	11 f4       	brne	.+4      	; 0x128 <matrixValue+0x52>
 124:	87 e3       	ldi	r24, 0x37	; 55
 126:	08 95       	ret
					else if(row == 64) value = '*';
 128:	20 34       	cpi	r18, 0x40	; 64
 12a:	39 f5       	brne	.+78     	; 0x17a <matrixValue+0xa4>
 12c:	30 c0       	rjmp	.+96     	; 0x18e <matrixValue+0xb8>
					state = 1;
					break;
	 
				}
			case 2:
				if(!state){
 12e:	33 23       	and	r19, r19
 130:	11 f5       	brne	.+68     	; 0x176 <matrixValue+0xa0>
					if(row == 8) value = '2'; 
 132:	28 30       	cpi	r18, 0x08	; 8
 134:	11 f4       	brne	.+4      	; 0x13a <matrixValue+0x64>
 136:	82 e3       	ldi	r24, 0x32	; 50
 138:	08 95       	ret
					else if(row == 16) value = '5';
 13a:	20 31       	cpi	r18, 0x10	; 16
 13c:	11 f4       	brne	.+4      	; 0x142 <matrixValue+0x6c>
 13e:	85 e3       	ldi	r24, 0x35	; 53
 140:	08 95       	ret
					else if(row == 32) value = '8';
 142:	20 32       	cpi	r18, 0x20	; 32
 144:	11 f4       	brne	.+4      	; 0x14a <matrixValue+0x74>
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	08 95       	ret
					else if(row == 64) value = '0';
 14a:	20 34       	cpi	r18, 0x40	; 64
 14c:	b1 f4       	brne	.+44     	; 0x17a <matrixValue+0xa4>
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	08 95       	ret
				
					state = 1;
					break;
				}
			case 4:
				if(!state){
 152:	33 23       	and	r19, r19
 154:	81 f4       	brne	.+32     	; 0x176 <matrixValue+0xa0>
					if(row == 8) value = '3'; 
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	11 f4       	brne	.+4      	; 0x15e <matrixValue+0x88>
 15a:	83 e3       	ldi	r24, 0x33	; 51
 15c:	08 95       	ret
					else if(row == 16) value = '6';
 15e:	20 31       	cpi	r18, 0x10	; 16
 160:	11 f4       	brne	.+4      	; 0x166 <matrixValue+0x90>
 162:	86 e3       	ldi	r24, 0x36	; 54
 164:	08 95       	ret
					else if(row == 32) value = '9';
 166:	20 32       	cpi	r18, 0x20	; 32
 168:	11 f4       	brne	.+4      	; 0x16e <matrixValue+0x98>
 16a:	89 e3       	ldi	r24, 0x39	; 57
 16c:	08 95       	ret
					else if(row == 64) value = '#';
 16e:	20 34       	cpi	r18, 0x40	; 64
 170:	21 f4       	brne	.+8      	; 0x17a <matrixValue+0xa4>
 172:	83 e2       	ldi	r24, 0x23	; 35
 174:	08 95       	ret
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	01 c0       	rjmp	.+2      	; 0x17c <matrixValue+0xa6>
 17a:	31 e0       	ldi	r19, 0x01	; 1
	
	char row;
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){
 17c:	22 0f       	add	r18, r18
 17e:	4f 5f       	subi	r20, 0xFF	; 255
 180:	5f 4f       	sbci	r21, 0xFF	; 255
 182:	44 30       	cpi	r20, 0x04	; 4
 184:	51 05       	cpc	r21, r1
 186:	09 f0       	breq	.+2      	; 0x18a <matrixValue+0xb4>
 188:	ad cf       	rjmp	.-166    	; 0xe4 <matrixValue+0xe>
 18a:	80 e0       	ldi	r24, 0x00	; 0
		}
		if(state && value) return value;
	}
	
	return 0;
}
 18c:	08 95       	ret
	
	char row;
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){
 18e:	8a e2       	ldi	r24, 0x2A	; 42
 190:	08 95       	ret

00000192 <main>:
	PORTB = (x << 4);
}

void USART_Init(unsigned int baud){

	UBRR0H = (baud>>8); //Set baud Rate
 192:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = baud;
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN)|(1<<TXEN); 
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	80 93 95 00 	sts	0x0095, r24
	}
}

void init(void){
	
	DDRB = DDRD = 0xF0; // Ledek kimenetbe állítása
 1a4:	80 ef       	ldi	r24, 0xF0	; 240
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	81 b3       	in	r24, 0x11	; 17
 1aa:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;		// 7 szegmens kiement
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xF8;		// RED kimenet sorok kimenet, oszlopok bemenet
 1b0:	88 ef       	ldi	r24, 0xF8	; 248
 1b2:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xE0;		// Gombok bemenet
 1b4:	80 ee       	ldi	r24, 0xE0	; 224
 1b6:	80 93 64 00 	sts	0x0064, r24
int main(void){
	USART_Init (MYUBRR);
	init();

	for(;;){
		USART_Transmit(matrixValue());
 1ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <matrixValue>
}

void USART_Transmit(unsigned char data)
{

	if(!data) return;
 1be:	88 23       	and	r24, r24
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <main+0x36>
	while ( !( UCSR0A & (1<<UDRE)) );
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <main+0x30>
	UDR0 = data;
 1c6:	8c b9       	out	0x0c, r24	; 12
}

unsigned char USART_Receive(void)
{

	while ( !(UCSR0A & (1<<RXC)) );
 1c8:	5f 9b       	sbis	0x0b, 7	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x36>
	return UDR0;
 1cc:	8c b1       	in	r24, 0x0c	; 12
	return 0;
}

void showOnLed(unsigned char x){

	PORTD = x;
 1ce:	82 bb       	out	0x12, r24	; 18
	PORTB = (x << 4);
 1d0:	82 95       	swap	r24
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	f1 cf       	rjmp	.-30     	; 0x1ba <main+0x28>

000001d8 <showOnLed>:
	return 0;
}

void showOnLed(unsigned char x){

	PORTD = x;
 1d8:	82 bb       	out	0x12, r24	; 18
	PORTB = (x << 4);
 1da:	82 95       	swap	r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	88 bb       	out	0x18, r24	; 24
}
 1e0:	08 95       	ret

000001e2 <USART_Init>:

void USART_Init(unsigned int baud){

	UBRR0H = (baud>>8); //Set baud Rate
 1e2:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = baud;
 1e6:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN)|(1<<TXEN); 
 1e8:	88 e1       	ldi	r24, 0x18	; 24
 1ea:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
 1ec:	8e e0       	ldi	r24, 0x0E	; 14
 1ee:	80 93 95 00 	sts	0x0095, r24
}
 1f2:	08 95       	ret

000001f4 <USART_Transmit>:

void USART_Transmit(unsigned char data)
{

	if(!data) return;
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <USART_Transmit+0xa>
	while ( !( UCSR0A & (1<<UDRE)) );
 1f8:	5d 9b       	sbis	0x0b, 5	; 11
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <USART_Transmit+0x4>
	UDR0 = data;
 1fc:	8c b9       	out	0x0c, r24	; 12
 1fe:	08 95       	ret

00000200 <USART_Receive>:
}

unsigned char USART_Receive(void)
{

	while ( !(UCSR0A & (1<<RXC)) );
 200:	5f 9b       	sbis	0x0b, 7	; 11
 202:	fe cf       	rjmp	.-4      	; 0x200 <USART_Receive>
	return UDR0;
 204:	8c b1       	in	r24, 0x0c	; 12
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
