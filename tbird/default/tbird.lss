
tbird.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000063  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000221  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000180  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000272  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ee  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c2  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  b6:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init>:
	}
}

void init(){
	
	DDRB = DDRD = 0xF0; // Ledek kimenetbe állítása
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	81 bb       	out	0x11, r24	; 17
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;		// 7 szegmens kiement
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xF8;		// RED kimenet sorok kimenet, oszlopok bemenet
  ca:	88 ef       	ldi	r24, 0xF8	; 248
  cc:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xE0;		// Gombok bemenet
  ce:	80 ee       	ldi	r24, 0xE0	; 224
  d0:	80 93 64 00 	sts	0x0064, r24

}
  d4:	08 95       	ret

000000d6 <showOnLed>:

void showOnLed(char x){

	PORTD = x;
  d6:	82 bb       	out	0x12, r24	; 18
	PORTB = (x << 4);
  d8:	82 95       	swap	r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	88 bb       	out	0x18, r24	; 24
}
  de:	08 95       	ret

000000e0 <showOnSegment>:

void showOnSegment(char digit, char data){
	PORTA |= (0b10000000 | digit << 4 | data);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	90 68       	ori	r25, 0x80	; 128
  e4:	96 2b       	or	r25, r22
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	98 2b       	or	r25, r24
  ec:	9b bb       	out	0x1b, r25	; 27
}
  ee:	08 95       	ret

000000f0 <matrixValue>:

char matrixValue(){
  f0:	28 e0       	ldi	r18, 0x08	; 8
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	60 e4       	ldi	r22, 0x40	; 64
  fa:	7c e9       	ldi	r23, 0x9C	; 156
  fc:	4f c0       	rjmp	.+158    	; 0x19c <matrixValue+0xac>
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){

		PORTC = (row&0b01111000);
  fe:	82 2f       	mov	r24, r18
 100:	88 77       	andi	r24, 0x78	; 120
 102:	85 bb       	out	0x15, r24	; 21
 104:	cb 01       	movw	r24, r22
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <matrixValue+0x16>

		_delay_ms(10);

		switch((~PINC) & 0b111){
 10a:	83 b3       	in	r24, 0x13	; 19
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	80 95       	com	r24
 110:	90 95       	com	r25
 112:	87 70       	andi	r24, 0x07	; 7
 114:	90 70       	andi	r25, 0x00	; 0
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	b1 f0       	breq	.+44     	; 0x148 <matrixValue+0x58>
 11c:	84 30       	cpi	r24, 0x04	; 4
 11e:	91 05       	cpc	r25, r1
 120:	29 f1       	breq	.+74     	; 0x16c <matrixValue+0x7c>
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	a9 f5       	brne	.+106    	; 0x190 <matrixValue+0xa0>
			case 1:
				if(!state){
 126:	33 23       	and	r19, r19
 128:	99 f5       	brne	.+102    	; 0x190 <matrixValue+0xa0>
					if(row == 8) value = 1;
 12a:	28 30       	cpi	r18, 0x08	; 8
 12c:	11 f4       	brne	.+4      	; 0x132 <matrixValue+0x42>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
					else if(row == 16) value = 4;
 132:	20 31       	cpi	r18, 0x10	; 16
 134:	11 f4       	brne	.+4      	; 0x13a <matrixValue+0x4a>
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	08 95       	ret
					else if(row == 32) value = 7;
 13a:	20 32       	cpi	r18, 0x20	; 32
 13c:	11 f4       	brne	.+4      	; 0x142 <matrixValue+0x52>
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	08 95       	ret
					else if(row == 64) value = 10;
 142:	20 34       	cpi	r18, 0x40	; 64
 144:	39 f5       	brne	.+78     	; 0x194 <matrixValue+0xa4>
 146:	30 c0       	rjmp	.+96     	; 0x1a8 <matrixValue+0xb8>
					state = 1;
					break;
	 
				}
			case 2:
				if(!state){
 148:	33 23       	and	r19, r19
 14a:	11 f5       	brne	.+68     	; 0x190 <matrixValue+0xa0>
					if(row == 8) value = 2; 
 14c:	28 30       	cpi	r18, 0x08	; 8
 14e:	11 f4       	brne	.+4      	; 0x154 <matrixValue+0x64>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	08 95       	ret
					else if(row == 16) value = 5;
 154:	20 31       	cpi	r18, 0x10	; 16
 156:	11 f4       	brne	.+4      	; 0x15c <matrixValue+0x6c>
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	08 95       	ret
					else if(row == 32) value = 8;
 15c:	20 32       	cpi	r18, 0x20	; 32
 15e:	11 f4       	brne	.+4      	; 0x164 <matrixValue+0x74>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	08 95       	ret
					else if(row == 64) value = 0xFF;
 164:	20 34       	cpi	r18, 0x40	; 64
 166:	b1 f4       	brne	.+44     	; 0x194 <matrixValue+0xa4>
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	08 95       	ret
				
					state = 1;
					break;
				}
			case 4:
				if(!state){
 16c:	33 23       	and	r19, r19
 16e:	81 f4       	brne	.+32     	; 0x190 <matrixValue+0xa0>
					if(row == 8) value = 3; 
 170:	28 30       	cpi	r18, 0x08	; 8
 172:	11 f4       	brne	.+4      	; 0x178 <matrixValue+0x88>
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	08 95       	ret
					else if(row == 16) value = 6;
 178:	20 31       	cpi	r18, 0x10	; 16
 17a:	11 f4       	brne	.+4      	; 0x180 <matrixValue+0x90>
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	08 95       	ret
					else if(row == 32) value = 9;
 180:	20 32       	cpi	r18, 0x20	; 32
 182:	11 f4       	brne	.+4      	; 0x188 <matrixValue+0x98>
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	08 95       	ret
					else if(row == 64) value = 11;
 188:	20 34       	cpi	r18, 0x40	; 64
 18a:	21 f4       	brne	.+8      	; 0x194 <matrixValue+0xa4>
 18c:	8b e0       	ldi	r24, 0x0B	; 11
 18e:	08 95       	ret
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	01 c0       	rjmp	.+2      	; 0x196 <matrixValue+0xa6>
 194:	31 e0       	ldi	r19, 0x01	; 1
	
	char row;
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){
 196:	22 0f       	add	r18, r18
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
 19c:	44 30       	cpi	r20, 0x04	; 4
 19e:	51 05       	cpc	r21, r1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <matrixValue+0xb4>
 1a2:	ad cf       	rjmp	.-166    	; 0xfe <matrixValue+0xe>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
		}
		if(state && value) return value;
	}
	
	return 0;
}
 1a6:	08 95       	ret
	
	char row;
	char state = 0;
	char value = 0;

	for(row = 8; row < 128; row <<= 1){
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	08 95       	ret

000001ac <main>:
void showOnSegment(char,char);
char matrixValue();
char readButton();


void main(){	
 1ac:	1f 93       	push	r17
	}
}

void init(){
	
	DDRB = DDRD = 0xF0; // Ledek kimenetbe állítása
 1ae:	80 ef       	ldi	r24, 0xF0	; 240
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;		// 7 szegmens kiement
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xF8;		// RED kimenet sorok kimenet, oszlopok bemenet
 1ba:	88 ef       	ldi	r24, 0xF8	; 248
 1bc:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xE0;		// Gombok bemenet
 1be:	80 ee       	ldi	r24, 0xE0	; 224
 1c0:	80 93 64 00 	sts	0x0064, r24
	return 0;
}

char readButton(){

	return (PING & 0x1F);
 1c4:	10 91 63 00 	lds	r17, 0x0063
void main(){	
	
	init();

	for(;;){
		showOnSegment(readButton(),matrixValue());
 1c8:	0e 94 78 00 	call	0xf0	; 0xf0 <matrixValue>
	PORTD = x;
	PORTB = (x << 4);
}

void showOnSegment(char digit, char data){
	PORTA |= (0b10000000 | digit << 4 | data);
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	98 2b       	or	r25, r24
 1d0:	90 68       	ori	r25, 0x80	; 128
 1d2:	12 95       	swap	r17
 1d4:	10 7f       	andi	r17, 0xF0	; 240
 1d6:	19 2b       	or	r17, r25
 1d8:	1b bb       	out	0x1b, r17	; 27
 1da:	f4 cf       	rjmp	.-24     	; 0x1c4 <main+0x18>

000001dc <readButton>:
	return 0;
}

char readButton(){

	return (PING & 0x1F);
 1dc:	80 91 63 00 	lds	r24, 0x0063

}
 1e0:	8f 71       	andi	r24, 0x1F	; 31
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
