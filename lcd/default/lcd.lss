
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000ac  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000345  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000143  00000000  00000000  00000691  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002e3  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000120  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000175  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include "lcd.h"

#define F_CPU 16000000UL;

int main(){
	LCD_init();
  be:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_init>
	LCD_sendData(238);
  c2:	8e ee       	ldi	r24, 0xEE	; 238
  c4:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendData>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0xa>

000000ca <LCD_sendEnable>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	2a ef       	ldi	r18, 0xFA	; 250
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_sendEnable+0x6>

}	

void LCD_sendEnable(void){
	_delay_ms(1);
	CTRL |= 0b0001000;
  d4:	e2 e6       	ldi	r30, 0x62	; 98
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
  de:	c9 01       	movw	r24, r18
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_sendEnable+0x16>
	_delay_ms(1);
	CTRL &= 0b11110111;
  e4:	80 81       	ld	r24, Z
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	80 83       	st	Z, r24
}
  ea:	08 95       	ret

000000ec <LCD_sendCommand>:

void LCD_sendCommand(unsigned char command){
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	08 2f       	mov	r16, r24
	// RS 0-ba
	CTRL &=  0xFD;
  f2:	e2 e6       	ldi	r30, 0x62	; 98
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	80 83       	st	Z, r24
	// data ra a command felső 4 bite
	DATA = (command&0xF0);
  fc:	80 2f       	mov	r24, r16
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	83 b9       	out	0x03, r24	; 3
	LCD_sendEnable();
 102:	0e 94 65 00 	call	0xca	; 0xca <LCD_sendEnable>
	// data ra a command also 4 bite
	DATA = ((command<<4)&0xF0);
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	00 0f       	add	r16, r16
 10c:	11 1f       	adc	r17, r17
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <LCD_sendCommand+0x1e>
 112:	03 b9       	out	0x03, r16	; 3
	LCD_sendEnable();
 114:	0e 94 65 00 	call	0xca	; 0xca <LCD_sendEnable>

}
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <LCD_init>:
 11e:	28 e8       	ldi	r18, 0x88	; 136
 120:	33 e1       	ldi	r19, 0x13	; 19
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_init+0x6>

void LCD_init(void){

	_delay_ms(20);
	//írány regiszterek beállítása
	DDRF |= 0x0E;
 128:	e1 e6       	ldi	r30, 0x61	; 97
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8e 60       	ori	r24, 0x0E	; 14
 130:	80 83       	st	Z, r24
	DDRE |= 0xF0;
 132:	82 b1       	in	r24, 0x02	; 2
 134:	80 6f       	ori	r24, 0xF0	; 240
 136:	82 b9       	out	0x02, r24	; 2
 138:	c9 01       	movw	r24, r18
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_init+0x1c>

	_delay_ms(20);
	LCD_sendCommand(0x33);
 13e:	83 e3       	ldi	r24, 0x33	; 51
 140:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
	LCD_sendCommand(0x32);
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
	LCD_sendCommand(0x28);		// Init 4 bit
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
	LCD_sendCommand(0x0C);
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
	LCD_sendCommand(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
 15c:	88 ea       	ldi	r24, 0xA8	; 168
 15e:	91 e6       	ldi	r25, 0x61	; 97
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_init+0x42>

	_delay_ms(100);


}	
 164:	08 95       	ret

00000166 <LCD_sendData>:
	DATA = ((command<<4)&0xF0);
	LCD_sendEnable();

}

void LCD_sendData(unsigned char data){
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	08 2f       	mov	r16, r24
	CTRL |= 0b00000010;
 16c:	e2 e6       	ldi	r30, 0x62	; 98
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
	DATA = data&0xF0;
 176:	80 2f       	mov	r24, r16
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	83 b9       	out	0x03, r24	; 3
	LCD_sendEnable();
 17c:	0e 94 65 00 	call	0xca	; 0xca <LCD_sendEnable>
	DATA = ((data<<4)&0xF0);
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	00 0f       	add	r16, r16
 186:	11 1f       	adc	r17, r17
 188:	9a 95       	dec	r25
 18a:	e1 f7       	brne	.-8      	; 0x184 <LCD_sendData+0x1e>
 18c:	03 b9       	out	0x03, r16	; 3
	LCD_sendEnable();
 18e:	0e 94 65 00 	call	0xca	; 0xca <LCD_sendEnable>
}
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <LCD_sendString>:

void LCD_sendString(unsigned char *str){
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <LCD_sendString+0x12>
	unsigned char i;
	for(i = 0; str[i] != 0; i++){
		LCD_sendData(str[i]);
 1a4:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendData>
	LCD_sendEnable();
}

void LCD_sendString(unsigned char *str){
	unsigned char i;
	for(i = 0; str[i] != 0; i++){
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	fe 01       	movw	r30, r28
 1ac:	e1 0f       	add	r30, r17
 1ae:	f1 1d       	adc	r31, r1
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	b9 f7       	brne	.-18     	; 0x1a4 <LCD_sendString+0xc>
		LCD_sendData(str[i]);
	}
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	08 95       	ret

000001be <LCD_setCursor>:

void LCD_setCursor(unsigned char row, unsigned char pos){
	if(row < 4 && pos < 16){
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	d0 f4       	brcc	.+52     	; 0x1f6 <LCD_setCursor+0x38>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	c0 f4       	brcc	.+48     	; 0x1f6 <LCD_setCursor+0x38>
		switch(row){
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	51 f0       	breq	.+20     	; 0x1de <LCD_setCursor+0x20>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <LCD_setCursor+0x1a>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <LCD_setCursor+0x26>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	81 f4       	brne	.+32     	; 0x1f6 <LCD_setCursor+0x38>
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <LCD_setCursor+0x30>
			case 0: LCD_sendCommand(0x80+pos); break;
 1d8:	86 2f       	mov	r24, r22
 1da:	80 58       	subi	r24, 0x80	; 128
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <LCD_setCursor+0x2a>
			case 1: LCD_sendCommand(0xC0+pos); break;
 1de:	86 2f       	mov	r24, r22
 1e0:	80 54       	subi	r24, 0x40	; 64
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <LCD_setCursor+0x2a>
			case 2: LCD_sendCommand(0x90+pos); break;
 1e4:	86 2f       	mov	r24, r22
 1e6:	80 57       	subi	r24, 0x70	; 112
 1e8:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
 1ec:	08 95       	ret
			case 3: LCD_sendCommand(0xD0+pos); break;
 1ee:	86 2f       	mov	r24, r22
 1f0:	80 53       	subi	r24, 0x30	; 48
 1f2:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
 1f6:	08 95       	ret

000001f8 <LCD_clrearScreen>:
		}
	}
}

void LCD_clrearScreen(void){
	LCD_sendCommand(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 76 00 	call	0xec	; 0xec <LCD_sendCommand>
	LCD_setCursor(0,0);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_setCursor>
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
